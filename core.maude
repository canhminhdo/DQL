fmod SCALAR is
    pr CONVERSION .
    pr EXT-BOOL .

    sorts Scalar iNumber .
    subsort Rat iNumber < Scalar .

    --- imaginary unit
    op i : -> iNumber [ctor].

    --- basic operators
    op _.*_ : Scalar Scalar -> Scalar [comm assoc prec 32] .
    op _./_ : Scalar Scalar -> Scalar [prec 31] .
    op _.+_ : Scalar Scalar -> Scalar [comm assoc prec 33] .
    op (_)^* : Scalar -> Scalar [prec 30] .

    --- comparative operators
    op _.>_ : Scalar Scalar -> Bool .
    op _.>=_ : Scalar Scalar -> Bool .
    op _.<_ : Scalar Scalar -> Bool .
    op _.<=_ : Scalar Scalar -> Bool .

    --- error scalar
    op errS : -> Scalar .

    --- some functions
    op Sqrt : Scalar -> Scalar .
    op Abs : Scalar -> Scalar .
    op Pow : Scalar Rat -> Scalar .

    vars R R1 R2 : Rat .
    vars S S1 S2 S3 S4 : Scalar .
    var N : Nat .

    --- imaginary properties
    eq i .* i = -1 .
    eq Abs(i) = 1 .
    --- absolute values of a postive number is a positive number
    eq Abs((Abs(S))) = Abs(S) .
    eq Abs((Pow(Abs(S), N))) = Pow(Abs(S), N) .

    --- Pow properties
    eq Pow(R1, R2) = (R1)^(R2) .

    --- rational number calculation.
    eq R1 .* R2 = R1 * R2 .
    eq R1 ./ R2 = R1 / R2 .
    eq R1 .+ R2 = R1 + R2 .
    eq R1 .< R2 = R1 < R2 .
    eq R1 .<= R2 = R1 <= R2 .
    eq R1 .> R2 = R1 > R2 .
    eq R1 .>= R2 = R1 >= R2 .

    --- c . c* = |c|^2
    eq S .* (S)^* = Pow(Abs(S), 2) .

    --- distributive properties
    eq S1 .* (S2 .+ S3) = S1 .* S2 .+ S1 .* S3 .

    --- constructing normal form: R .* S
    ceq (S .* R1 .+ S .* R2) = S .* (R1 .+ R2) if not S :: Rat .
    ceq S .+ R .* S = S .* (R .+ 1) if not S :: Rat .
    ceq S .+ S = S .* 2 if not S :: Rat .

    --- constructing normal form: S1 .* (1 ./ S2)
    ceq S1 ./ S2 = S1 .* (1 ./ S2) if not S1 :: Rat .
    ceq R ./ S = R .* (1 ./ S) if not S :: Rat /\ R =/= 1 .

    --- multiplicative properties
    eq S .* 1 = S .
    eq S .* 0 = 0 .
    ceq S .* (1 ./ S) = 1 if not S :: Rat .
    ceq (1 ./ S1) .* (1 ./ S2) = 1 ./ (S1 .* S2)
    if not S1 :: Rat /\ not S2 :: Rat .
    ceq S1 .* (1 ./ (S1 .* S2)) = 1 ./ S2
    if not S1 :: Rat /\ not S2 :: Rat .

    --- additive properties
    eq S .+ 0 = S .

    --- fraction properties
    eq 0 ./ S = 0 .
    eq S ./ 1 = S .
    ceq S ./ 0 = errS if S =/= 0 .
    eq 1 ./ (1 ./ S) =  S .
    eq 1 ./ (S1 .* (1 ./ S2)) =  S2 .* (1 ./ S1) .
    eq 1 ./ (S .* (R1 / R2)) =  (R2 / R1) .* (1 ./ S) .

    --- Sqrt calculation
    eq Sqrt(- N) = i .* N .
    eq Sqrt(1) = 1 .
    eq Sqrt(0) = 0 .
    eq Sqrt(S) .* Sqrt(S) = S .
    eq Sqrt(R1 / R2) = Sqrt(R1) .* (1 ./ Sqrt(R2)) .
    ceq Sqrt(1 ./ S) = 1 ./ Sqrt(S) if not S :: Rat .
    ceq Sqrt(S1 .* S2) = Sqrt(S1) .* Sqrt(S2) if not S1 :: Rat or-else not S2 :: Rat .
    eq Sqrt(S) .* (R ./ S) = R .* (1 ./ Sqrt(S)) .
    eq Sqrt(S1) .* (S2 / S1) = S2 .* (1 ./ Sqrt(S1)) .
    eq Sqrt(Pow(Abs(S), 2)) = Abs(S) .
    eq Sqrt(Pow(Pow(S, 2), 2)) = Pow(S, 2) .

    --- transpose of Sqrt
    eq (Sqrt(R))^* = Sqrt(R) .
    eq (S1 .* S2)^* = (S1)^* .* (S2)^* .
    eq (S1 ./ S2)^* = (S1)^* ./ (S2)^* .
    eq (S1 .+ S2)^* = (S1)^* .+ (S2)^* .
    eq (R)^* = R .
endfm

fmod DIRAC is
    pr SCALAR .
    sorts Ket Bra .

    ops |0> |1> : -> Ket [ctor] .
    ops <0| <1| : -> Bra [ctor] .
endfm

fmod MATRIX is
    pr DIRAC .
    sorts Vector Matrix .
    subsort Ket < Vector .
    subsorts Vector Bra < Matrix .

    --- zero matrix
    op O : -> Matrix [ctor] .
    --- identity matrix
    op I : -> Matrix [ctor] .
    --- fake matrix
    op nil : -> Matrix [ctor] .
    --- error matrix
    op errM : -> Matrix [ctor] .
    --- scalar multiplication with matrix
    op _._ : Scalar Vector -> Vector [prec 31] .
    op _._ : Scalar Matrix -> Matrix [prec 31] .
    --- matrix product
    op _x_ : Matrix Matrix -> Matrix [assoc prec 31] .
    --- matrix addition
    op _+_ : Vector Vector -> Vector [comm assoc prec 33] .
    op _+_ : Matrix Matrix -> Matrix [comm assoc prec 33] .
    --- tensor product
    op _(x)_ : Vector Vector -> Vector [assoc prec 31] .
    op _(x)_ : Matrix Matrix -> Matrix [assoc prec 31] .
    --- dagger
    op (_)^+ : Matrix -> Matrix [prec 30] .
    --- scalr product
    op SP(_,_) : Vector Vector -> Scalar .

    vars M M1 M2 M3 M4 : Matrix .
    vars V1 V2 V3 : Vector .
    vars S S1 S2 : Scalar .
    vars K1 K2 : Ket .

    --- scalar product
    eq SP(|0>, |0>) = 1 .
    eq SP(|0>, |1>) = 0 .
    eq SP(|1>, |0>) = 0 .
    eq SP(|1>, |1>) = 1 .
    eq SP(S1 . V1, V2) = (S1)^* .* SP(V1, V2) .
    eq SP(V1, S2 . V2) = S2 .* SP(V1, V2) .
    eq SP(V1 + V2, V3) = SP(V1, V3) .+ SP(V2, V3) .
    eq SP(V1, V2 + V3) = SP(V1, V2) .+ SP(V1, V3) .
    eq SP(K1 (x) V1, K2 (x) V2) = SP(K1, K2) .* SP(V1, V2) .
    eq (SP(V1, V2))^* = SP(V2, V1) .

    --- zero matrix properties
    eq 0 . M = O .
    eq S . O = O .
    eq 1 . M = M .

    eq O + M = M .
    eq M + O = M .

    eq O x M = O .
    eq M x O = O .

    eq M (x) O = O .
    eq O (x) M = O .

    --- nil matrix
    eq nil (x) M = M .
    eq M (x) nil = M .
    eq M + nil = M .
    eq S . nil = nil .

    --- identity matrix properties
    eq I x M = M .
    eq M x I = M .
    eq <0| x |0> = I .
    eq <1| x |1> = I .
    eq <0| x |1> = O .
    eq <1| x |0> = O .

    --- dagger properties
    eq (I)^+ = I .
    eq (O)^+ = O .
    eq (|0>)^+ = <0| .
    eq (|1>)^+ = <1| .
    eq (<0|)^+ = |0> .
    eq (<1|)^+ = |1> .
    eq (S . M)^+ = ((S)^*) . (M)^+ .
    eq (M1 x M2)^+ = (M2)^+ x (M1)^+ .
    eq (M1 + M2)^+ = (M1)^+ + (M2)^+ .
    eq (M1 (x) M2)^+ = (M1)^+ (x) (M2)^+ .
    eq ((M)^+)^+ = M .

    --- ditributive properties
    eq M1 x (M2 + M3) = M1 x M2 + M1 x M3 .
    eq (M1 + M2) x M3 = M1 x M3 + M2 x M3 .

    --- additive normal forms
    eq S . (M1 + M2) = S . M1 + S . M2 .
    eq (S1 . M) + (S2 . M) = (S1 .+ S2) . M .
    eq (S1 . M) + M = (S1 .+ 1) . M .
    eq M + M = 2 . M .
    --- multiplicative normal forms
    eq (S1 . M1) x (S2 . M2) = (S1 .* S2) . (M1 x M2) .
    eq (S . M1) x M2 = S . (M1 x M2) .
    eq M1 x (S . M2) = S . (M1 x M2) .
    --- scalar normal forms
    eq S1 . (S2 . M) = (S1 .* S2) . M .
    --- tensor product normal forms
    --- eq (S1 . M1) (x) (S2 . M2) = (S1 .* S2) . (M1 (x) M2) . --- may ignore
    eq (S . M1) (x) M2 = S . (M1 (x) M2) .
    eq M1 (x) (S . M2) = S . (M1 (x) M2) .

    --- tensor product properties
    eq (M1 (x) M2) x (M3 (x) M4) = (M1 x M3) (x) (M2 x M4) .
    eq M1 (x) (M2 + M3) = M1 (x) M2 + M1 (x) M3 .
    eq (M1 + M2) (x) M3 = M1 (x) M3 + M2 (x) M3 .

    --- basic matrices
    ops B0 B1 B2 B3 P0 P1 : -> Matrix .
    eq B0 = |0> x <0| .
    eq B1 = |0> x <1| .
    eq B2 = |1> x <0| .
    eq B3 = |1> x <1| .
    eq P0 = B0 .
    eq P1 = B3 .

    --- basic gates
    ops X Y Z H S T CX CY CZ SWAP CCX CCZ CSWAP : -> Matrix .
    eq X = B1 + B2 .
    eq Y = ((-1) .* i) . B1 + i . B2 .
    eq Z = B0  + (-1) . B3 .
    eq H = 1 ./ Sqrt(2) . B0 + 1 ./ Sqrt(2) . B1 + 1 ./ Sqrt(2) . B2 + (-1) ./ Sqrt(2) . B3 .
    eq S = B0 + i . B3 .
    eq T = B0 + ((1 + i) ./ Sqrt(2)) . B3 .
    eq CX = B0 (x) I + B3 (x) X .
    eq CY = B0 (x) I + B3 (x) Y .
    eq CZ = B0 (x) I + B3 (x) Z .
    --- SWAP(N1, N2) = CX(N1, N2) x CX(N2, N1) x CX(N1, N2)
    eq SWAP = (B0 (x) I + B3 (x) X) x (I (x) B0 + X (x) B3) x (B0 (x) I + B3 (x) X) .
    --- CCX = B0(x)I(x)I + B3(x)B0(x)I + B3(x)B3(x)B1 + B3(x)B3(x)B2
    eq CCX = B0 (x) I (x) I + B3 (x) CX . 
    --- CCZ = B0(x)I(x)I + B3(x)B0(x)I + B3(x)B3(x)B0 + (-1) . B3(x)B3(x)B3
    eq CCZ = B0 (x) I (x) I + B3 (x) CZ . 
    --- CSWAP = B0(x)I(x)I + B3(x)B0(x)B0 + B3(x)B1(x)B2 + B3(x)B2(x)B1 + B3(x)B3(x)B3
    eq CSWAP = B0 (x) I (x) I + B3 (x) SWAP .
endfm