load DQL.maude

mod ENTAGLE-SWAP is
    pr DQL-SEMANTICS .

    var S : Scalar .

    --- defining initial states
    ops a b : -> Scalar .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) = 1 .
    eq S .* Pow(Abs(a), 2) .+ S .* Pow(Abs(b), 2) = S .

    ops ERP : -> Matrix .
    eq ERP = (1 ./ Sqrt(2)) . |0>(x)|0> + (1 ./ Sqrt(2)) . |1>(x)|1> .

    op initQState : -> Qubit .
    eq initQState = (q[0]: |0>) (q[1]: |0>) (q[2]: |0>) (q[3]: |0>) .
endm

mod ENTAGLE-SWAP-CHECK is
    pr ENTAGLE-SWAP .
    pr CLOSED-SUBSPACES .

    --- defining the subspaces for atomic formulas
    op prop : -> AtomicFormula [ctor] .
    eq V(prop) = { ERP } .

    var Q : Qubit .

    --- checking atomic formulas for Teleportation
    eq Q |= prop = qubitAt(Q, 0 3) in V(prop) [print "Q = " Q] .
endm

in debug.maude

search in ENTAGLE-SWAP-CHECK : initQState |= [ H(0) ; CX(0, 1) ; H(2) ; CX(2, 3) ; CX(1, 2) ; H(1) ;
if
    P(2, |0>) ->
        if
            P(1, |0>) -> skip
            |
            P(1, |1>) -> Z(3)
        fi
    |
    P(2, |1>) -> X(3) ;
        if
            P(1, |0>) -> skip
            |
            P(1, |1>) -> Z(3)
        fi
fi
] prop =>! JS:JudgementSet such that JS:JudgementSet =/= emptyJS .
