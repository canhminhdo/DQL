load DQL.maude

mod GATE-TELEPORT is
    pr DQL-SEMANTICS .

    var S : Scalar .

    --- defining initial states
    ops a b c d : -> Scalar .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) = 1 .
    eq S .* Pow(Abs(a), 2) .+ S .* Pow(Abs(b), 2) = S .

    eq Pow(Abs(c), 2) .+ Pow(Abs(d), 2) = 1 .
    eq S .* Pow(Abs(c), 2) .+ S .* Pow(Abs(d), 2) = S .

    op initQState : -> Qubit .
    eq initQState = (q[0]: a . |0> + b . |1>) (q[1]: |0>) (q[2]: |0>) (q[3]: |0>) (q[4]: |0>) (q[5]: c . |0> + d . |1>) .

    op targetQState : -> Qubit .
    eq targetQState = ((q[0]: c . |0> + d . |1>) (q[1]: a . |0> + b . |1>)).CX(0, 1) .
endm

mod GATE-TELEPORT-CHECK is
    pr GATE-TELEPORT .
    pr CLOSED-SUBSPACES .

    --- defining the subspaces for atomic formulas
    op prop : -> AtomicFormula [ctor] .
    eq V(prop) = { qubitAt(targetQState, 0 1) } .

    var Q : Qubit .
    var M : Matrix .

    --- checking atomic formulas for Teleportation
    eq Q |= prop = qubitAt(Q, 3 2) in V(prop) [print "Q = " Q] .
endm

in debug.maude

--- Following the circuit from wikipedia
search in GATE-TELEPORT-CHECK : initQState |= [ H(1) ; CX(1, 2) ; H(3) ; CX(3, 4); CX(3, 2) ; CX(0, 1) ; H(0) ; CX(4, 5) ; H(4) ;
if P(0, |0>) -> skip | P(0, |1>) -> Z(2) ; Z(3) fi ;
if P(1, |0>) -> skip | P(1, |1>) -> X(2) fi ;
if P(5, |0>) -> skip | P(5, |1>) -> X(2) ; X(3) fi ;
if P(4, |0>) -> skip | P(4, |1>) -> Z(3) fi
] prop =>! JS:JudgementSet such that JS:JudgementSet =/= emptyJS .

--- Following the circuit from the paper of D. Gottesman and I. L. Chuang with a revision
--- search in GATE-TELEPORT-CHECK : initQState |= [ H(1) ; CX(1, 2) ; H(3) ; CX(3, 4) ; CX(3, 2) ; CX(1, 0) ; H(1) ; CX(5, 4) ; H(5) ;
--- if P(4, |0>) -> skip | P(4, |1>) -> X(2) ; X(3) fi ;
--- if P(5, |0>) -> skip | P(5, |1>) -> Z(3) fi ;
--- if P(0, |0>) -> skip | P(0, |1>) -> X(2) fi ;
--- if P(1, |0>) -> skip | P(1, |1>) -> Z(2) ; Z(3) fi
--- ] prop =>! JS:JudgementSet such that JS:JudgementSet =/= emptyJS .