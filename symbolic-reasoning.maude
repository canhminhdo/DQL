in core.maude

fmod QUBIT is
    pr MATRIX .
    pr NAT-LIST .

    sorts OneQubit EnQubit Qubit QState .
    subsort OneQubit EnQubit < Qubit < QState .

    vars N N1 N2 : Nat .
    var V : Vector .
    var NL : NatList .

    --- empty qubit
    op emp : -> Qubit [ctor] .
    --- error qubit
    op errQ : -> Qubit [ctor] .
    op (q[_]:_) : NatList Vector -> Qubit .
    op __ : Qubit Qubit -> Qubit [ctor assoc comm id: emp] .
    mb(q[N]: V) : OneQubit .
    mb(q[N1 N2 NL]: V) : EnQubit .
    --- remove unnecessary qubits
    eq (q[nil]: V) = emp .
endfm

fmod SYMBOLIC-REASONING is
    pr QUBIT .

    vars N N1 N2 N3 N4 : Nat .
    vars M M1 M2 M3 M4 P : Matrix .
    vars NL NL1 NL2 NL3 NL4 : NatList .
    var QS : Qubit .
    vars S S1 S2 Prob : Scalar .
    vars Ket Ket1 Ket2 : Ket .
    vars V V1 V2 V3 : Vector .

    --- applying hadmard gate
    op _.H(_) : Qubit Nat -> Qubit .
    ceq ((q[NL1 N NL2]: V) QS).H(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) H (x) I[size(NL2)] .

    --- applying I gate
    op _.I(_) : Qubit Nat -> Qubit .
    eq (QS).I(N) = QS .

    --- applying X gate
    op _.X(_) : Qubit Nat -> Qubit .
    ceq ((q[NL1 N NL2]: V) QS).X(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) X (x) I[size(NL2)] .

    --- applying Y gate
    op _.Y(_) : Qubit Nat -> Qubit .
    ceq ((q[NL1 N NL2]: V) QS).Y(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) Y (x) I[size(NL2)] .

    --- applying Z gate
    op _.Z(_) : Qubit Nat -> Qubit .
    ceq ((q[NL1 N NL2]: V) QS).Z(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) Z (x) I[size(NL2)] .

    --- applying CX gate
    op _.CX(_,_) : Qubit Nat Nat -> Qubit .
    ceq ((q[NL1 N1 NL2]: V1) (q[NL3 N2 NL4]: V2) QS).CX(N1, N2)
    = simplify((q[NL1 N1 NL2 NL3 N2 NL4]: M x V)) QS
    if V := V1 (x) V2
    /\ M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) I (x) I[size(NL4)]
    /\ M2 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) X (x) I[size(NL4)]
    /\ M := M1 + M2 .

    ceq ((q[NL1 N1 NL2 N2 NL3]: V) QS).CX(N1, N2) = simplify((q[NL1 N1 NL2 N2 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) I (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) X (x) I[size(NL3)]
    /\ M := M1 + M2 .

    ceq ((q[NL1 N2 NL2 N1 NL3]: V) QS).CX(N1, N2) = simplify((q[NL1 N2 NL2 N1 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) I (x) I[size(NL2)] (x) B0 (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) X (x) I[size(NL2)] (x) B3 (x) I[size(NL3)]
    /\ M := M1 + M2 .

    --- applying SWAP gate
    --- SWAP = (B0 (x) I + B3 (x) X) x (I (x) B0 + X (x) B3) x (B0 (x) I + B3 (x) X) .
    op _.SWAP(_,_) : Qubit Nat Nat -> Qubit .
    ceq ((q[NL1 N1 NL2]: V1) (q[NL3 N2 NL4]: V2) QS).SWAP(N1, N2)
    = simplify((q[NL1 N1 NL2 NL3 N2 NL4]: M x V)) QS
    if V := V1 (x) V2
    /\ M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x)
             I[size(NL3)] (x) I (x) I[size(NL4)] +
             I[size(NL1)] (x) B3 (x) I[size(NL2)] (x)
             I[size(NL3)] (x) X (x) I[size(NL4)]
    /\ M2 := I[size(NL1)] (x) I (x) I[size(NL2)] (x)
             I[size(NL3)] (x) B0 (x) I[size(NL4)] +
             I[size(NL1)] (x) X (x) I[size(NL2)] (x)
             I[size(NL3)] (x) B3 (x) I[size(NL4)]
    /\ M := M1 x M2 x M1 .

    ceq ((q[NL1 N1 NL2 N2 NL3]: V) QS).SWAP(N1, N2)
    = simplify((q[NL1 N1 NL2 N2 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) I (x) I[size(NL3)] +
             I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) X (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) I (x) I[size(NL2)] (x) B0 (x) I[size(NL3)] +
             I[size(NL1)] (x) X (x) I[size(NL2)] (x) B3 (x) I[size(NL3)]
    /\ M := M1 x M2 x M1 .

    ceq ((q[NL1 N2 NL2 N1 NL3]: V) QS).SWAP(N1, N2)
    = simplify((q[NL1 N2 NL2 N1 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) I (x) I[size(NL3)] +
             I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) X (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) I (x) I[size(NL2)] (x) B0 (x) I[size(NL3)] +
             I[size(NL1)] (x) X (x) I[size(NL2)] (x) B3 (x) I[size(NL3)]
    /\ M := M1 x M2 x M1 .

    --- projections
    op _.P`(_,_`) : Qubit Nat Matrix -> Qubit .
    ceq ((q[NL1 N NL2]: V1) QS).P(N, P) = simplify((q[NL1 N NL2]: V2) QS)
    if V2 := (I[size(NL1)] (x) (P x (P)^+) (x) I[size(NL2)]) x V1 .

    op _.P`(_,_,_`) : Qubit Nat Nat Matrix -> Qubit .
    ceq ((q[NL1 N1 N2 NL2]: V1) QS).P(N1, N2, P) = simplify((q[NL1 N1 N2 NL2]: V2) QS)
    if V2 := (I[size(NL1)] (x) (P x (P)^+) (x) I[size(NL2)]) x V1 .

    op _.P`(_,_,_`) : Qubit Nat Nat Matrix -> Qubit .
    eq ((q[NL1 N1 N2 NL2]: V1) QS).P(N2, N1, P) = ((q[NL1 N1 N2 NL2]: V1) QS).P(N1, N2, P) .

    --- N -> I (x) I (x) ...
    op I[_] : Nat -> Matrix .
    eq I[0] = nil .
    ceq I[N] = I (x) I[sd(N, 1)] if N > 0 .

    --- simplify a multiple qubit
    op simplify : Qubit -> Qubit .
    eq simplify(QS) = simplifyEPR(simplifyOne(QS)) .

    op simplifyOne : Qubit -> Qubit .
    eq simplifyOne((q[NL]: M) QS) = simplifyOne(QS)
    if size(NL) > 1 then simplifyOne*(NL, (q[NL]: M)) else (q[NL]: M) fi .
    eq simplifyOne(emp) = emp .

    op simplifyOne* : NatList Qubit -> Qubit .
    ceq simplifyOne*(N NL1, (q[NL2]: M)) = if sameKet?*(NL2, N, M, Ket) then
        (q[N] : Ket)
        simplifyOne*(NL1, q[rmIndex(NL2, N)]: rmQubitAt(NL2, N, M))
    else
        simplifyOne*(NL1, (q[NL2]: M))
    fi
    if Ket := firstKetAt*(NL2, N, M) .

    eq simplifyOne*(nil, QS) = QS .

    --- simplify the multiplication of two ERP states
    --- [TODO] only support some specific cases
    op simplifyEPR : Qubit -> Qubit .
    eq simplifyEPR((q[NL]: M) QS) = simplifyEPR*((q[NL]: M)) simplifyEPR(QS) .
    eq simplifyEPR(emp) = emp .

    op simplifyEPR* : Qubit -> Qubit .
    --- case 1
    eq simplifyEPR*((q[N1 N2 N3 N4]: S . |0>(x)|0>(x)|0>(x)|0> + S . |0>(x)|1>(x)|1>(x)|0> +
                                     S . |1>(x)|0>(x)|0>(x)|1> + S . |1>(x)|1>(x)|1>(x)|1>))
    = (q[N1 N4]: Sqrt(S) . (|0>(x)|0> + |1>(x) |1>)) (q[N2 N3]: Sqrt(S) . (|0>(x)|0> + |1>(x) |1>)) .
    --- case 2
    ceq simplifyEPR*((q[N1 N2 N3 N4]: S1 . |0>(x)|0>(x)|0>(x)|0> + S1 . |0>(x)|1>(x)|1>(x)|0> +
                                     S2 . |1>(x)|0>(x)|0>(x)|1> + S2 . |1>(x)|1>(x)|1>(x)|1>))
    = (q[N1 N4]: Sqrt(S1) . (|0>(x)|0> + (-1) . |1>(x) |1>)) (q[N2 N3]: Sqrt(S2) . (|0>(x)|0> + |1>(x) |1>))
    if S1 == (-1) .* S2 .
    --- otherwise
    eq simplifyEPR*(QS) = QS [owise] .

    --- remove an index from a natural list
    op rmIndex : NatList Nat -> NatList .
    eq rmIndex(N1 NL, N2) = if N1 == N2 then NL else N1 rmIndex(NL, N2) fi .
    eq rmIndex(nil, N) = nil .

    --- get a first ket at a single qubit with an index
    op firstKetAt : Qubit Nat -> Ket .
    eq firstKetAt((q[NL1 N NL2]: M), N) = firstKetAt*(NL1 N NL2, N, M) .

    op firstKetAt* : NatList Nat Matrix -> Ket .
    eq firstKetAt*(NL, N, S . M) = firstKetAt**(NL, N, M) .
    eq firstKetAt*(NL, N, S . M1 + M2) = firstKetAt**(NL, N, M1) .
    eq firstKetAt*(NL, N, M) = firstKetAt**(NL, N, M) [owise] .

    op firstKetAt** : NatList Nat Matrix -> Ket .
    eq firstKetAt**(N1 NL, N2, Ket (x) M) = if N1 == N2 then Ket else firstKetAt**(NL, N2, M) fi .
    eq firstKetAt**(N, N, Ket) = Ket .

    --- checking if a single qubit is solely |0> or |1> in a multiple qubits
    op sameKet? : Qubit Nat Ket -> Bool .
    eq sameKet?((q[NL1 N NL2]: M), N, Ket) = sameKet?*(NL1 N NL2, N, M, Ket) .

    op sameKet?* : NatList Nat Matrix Ket -> Bool .
    eq sameKet?*(NL, N, S . M, Ket) = sameKet?*(NL, N, M, Ket) .
    eq sameKet?*(NL, N, S . M1 + M2, Ket) = sameKet?*(NL, N, S . M1, Ket) and sameKet?*(NL, N, M2, Ket) .
    eq sameKet?*(NL, N, M, Ket) = sameKet?**(NL, N, M, Ket) [owise] .

    op sameKet?** : NatList Nat Matrix Ket -> Bool .
    eq sameKet?**(N1 NL, N2, Ket1 (x) M, Ket2) = if N1 == N2 then Ket1 == Ket2 else sameKet?**(NL, N2, M, Ket2) fi .
    eq sameKet?**(N, N, Ket1, Ket2) = Ket1 == Ket2 .

    --- qubit information
    op qubitAt : Qubit NatList -> Matrix .
    ceq qubitAt((q[NL]: M) QS, NL) = M if NL =/= nil .
    eq qubitAt(QS, NL) = errM [owise] .

    --- remove qubit at a index after a measurement
    op rmQubitAt : NatList Nat Matrix -> Matrix .
    eq rmQubitAt(NL, N, S . M) = S . rmQubitAt(NL, N, M) .
    eq rmQubitAt(NL, N, S . M1 + M2) = rmQubitAt(NL, N, S . M1) + rmQubitAt(NL, N, M2) .
    eq rmQubitAt(NL, N, M) = rmQubitAt*(NL, N, M) [owise] .

    op rmQubitAt* : NatList Nat Matrix -> Matrix .
    eq rmQubitAt*(N1 NL, N2, Ket (x) M) = if N1 == N2 then M else Ket (x) rmQubitAt*(NL, N2, M) fi .
    eq rmQubitAt*(N, N, Ket) = nil .
endfm