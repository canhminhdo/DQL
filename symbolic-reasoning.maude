fmod SCALAR is
    pr CONVERSION .
    pr EXT-BOOL .

    sorts Scalar iNumber .
    subsort Rat iNumber < Scalar .

    --- imaginary unit
    op i : -> iNumber [ctor].

    --- basic operators
    op _.*_ : Scalar Scalar -> Scalar [comm assoc prec 32] .
    op _./_ : Scalar Scalar -> Scalar [prec 31] .
    op _.+_ : Scalar Scalar -> Scalar [comm assoc prec 33] .
    op (_)^* : Scalar -> Scalar [prec 30] .

    --- comparative operators
    op _.>_ : Scalar Scalar -> Bool .
    op _.>=_ : Scalar Scalar -> Bool .
    op _.<_ : Scalar Scalar -> Bool .
    op _.<=_ : Scalar Scalar -> Bool .

    --- error scalar
    op errS : -> Scalar .

    --- some functions
    op Sqrt : Scalar -> Scalar .
    op Abs : Scalar -> Scalar .
    op Pow : Scalar Rat -> Scalar .

    vars R R1 R2 : Rat .
    vars S S1 S2 S3 S4 : Scalar .
    var N : Nat .

    --- imaginary properties
    eq i .* i = -1 .
    eq Abs(i) = 1 .
    --- absolute values of a postive number is a positive number
    eq Abs((Abs(S))) = Abs(S) .
    eq Abs((Pow(Abs(S), N))) = Pow(Abs(S), N) .

    --- Pow properties
    eq Pow(R1, R2) = (R1)^(R2) .

    --- rational number calculation.
    eq R1 .* R2 = R1 * R2 .
    eq R1 ./ R2 = R1 / R2 .
    eq R1 .+ R2 = R1 + R2 .
    eq R1 .< R2 = R1 < R2 .
    eq R1 .<= R2 = R1 <= R2 .
    eq R1 .> R2 = R1 > R2 .
    eq R1 .>= R2 = R1 >= R2 .

    --- c . c* = |c|^2
    eq S .* (S)^* = Pow(Abs(S), 2) .

    --- distributive properties
    eq S1 .* (S2 .+ S3) = S1 .* S2 .+ S1 .* S3 .

    --- constructing normal form: R .* S
    ceq (S .* R1 .+ S .* R2) = S .* (R1 .+ R2) if not S :: Rat .
    ceq S .+ R .* S = S .* (R .+ 1) if not S :: Rat .
    ceq S .+ S = S .* 2 if not S :: Rat .

    --- constructing normal form: S1 .* (1 ./ S2)
    ceq S1 ./ S2 = S1 .* (1 ./ S2) if not S1 :: Rat .
    ceq R ./ S = R .* (1 ./ S) if not S :: Rat /\ R =/= 1 .

    --- multiplicative properties
    eq S .* 1 = S .
    eq S .* 0 = 0 .
    ceq S .* (1 ./ S) = 1 if not S :: Rat .
    ceq (1 ./ S1) .* (1 ./ S2) = 1 ./ (S1 .* S2)
    if not S1 :: Rat /\ not S2 :: Rat .
    ceq S1 .* (1 ./ (S1 .* S2)) = 1 ./ S2
    if not S1 :: Rat /\ not S2 :: Rat .

    --- additive properties
    eq S .+ 0 = S .

    --- fraction properties
    eq 0 ./ S = 0 .
    eq S ./ 1 = S .
    ceq S ./ 0 = errS if S =/= 0 .
    eq 1 ./ (1 ./ S) =  S .
    eq 1 ./ (S1 .* (1 ./ S2)) =  S2 .* (1 ./ S1) .
    eq 1 ./ (S .* (R1 / R2)) =  (R2 / R1) .* (1 ./ S) .

    --- Sqrt calculation
    eq Sqrt(- N) = i .* N .
    eq Sqrt(1) = 1 .
    eq Sqrt(0) = 0 .
    eq Sqrt(S) .* Sqrt(S) = S .
    eq Sqrt(R1 / R2) = Sqrt(R1) .* (1 ./ Sqrt(R2)) .
    ceq Sqrt(1 ./ S) = 1 ./ Sqrt(S) if not S :: Rat .
    ceq Sqrt(S1 .* S2) = Sqrt(S1) .* Sqrt(S2) if not S1 :: Rat or-else not S2 :: Rat .
    eq Sqrt(S) .* (R ./ S) = R .* (1 ./ Sqrt(S)) .
    eq Sqrt(S1) .* (S2 / S1) = S2 .* (1 ./ Sqrt(S1)) .
    eq Sqrt(Pow(Abs(S), 2)) = Abs(S) .
    eq Sqrt(Pow(Pow(S, 2), 2)) = Pow(S, 2) .

    --- transpose of Sqrt
    eq (Sqrt(R))^* = Sqrt(R) .
    eq (S1 .* S2)^* = (S1)^* .* (S2)^* .
    eq (S1 ./ S2)^* = (S1)^* ./ (S2)^* .
    eq (S1 .+ S2)^* = (S1)^* .+ (S2)^* .
    eq (R)^* = R .
endfm

fmod DIRAC is
    pr SCALAR .
    sorts Ket Bra .

    ops |0> |1> : -> Ket [ctor] .
    ops <0| <1| : -> Bra [ctor] .
endfm

fmod MATRIX is
    pr DIRAC .
    sorts Vector Matrix .
    subsort Ket < Vector .
    subsorts Vector Bra < Matrix .

    --- zero matrix
    op O : -> Matrix [ctor] .
    --- identity matrix
    op I : -> Matrix [ctor] .
    --- fake matrix
    op nil : -> Matrix [ctor] .
    --- error matrix
    op errM : -> Matrix [ctor] .
    --- scalar multiplication with matrix
    op _._ : Scalar Vector -> Vector [prec 31] .
    op _._ : Scalar Matrix -> Matrix [prec 31] .
    --- matrix product
    op _x_ : Matrix Matrix -> Matrix [assoc prec 31] .
    --- matrix addition
    op _+_ : Vector Vector -> Vector [comm assoc prec 33] .
    op _+_ : Matrix Matrix -> Matrix [comm assoc prec 33] .
    --- tensor product
    op _(x)_ : Vector Vector -> Vector [assoc prec 31] .
    op _(x)_ : Matrix Matrix -> Matrix [assoc prec 31] .
    --- dagger
    op (_)^+ : Matrix -> Matrix [prec 30] .
    --- scalr product
    op SP(_,_) : Vector Vector -> Scalar .

    vars M M1 M2 M3 M4 : Matrix .
    vars V1 V2 V3 : Vector .
    vars S S1 S2 : Scalar .
    vars K1 K2 : Ket .

    --- scalar product
    eq SP(|0>, |0>) = 1 .
    eq SP(|0>, |1>) = 0 .
    eq SP(|1>, |0>) = 0 .
    eq SP(|1>, |1>) = 1 .
    eq SP(S1 . V1, V2) = (S1)^* .* SP(V1, V2) .
    eq SP(V1, S2 . V2) = S2 .* SP(V1, V2) .
    eq SP(V1 + V2, V3) = SP(V1, V3) .+ SP(V2, V3) .
    eq SP(V1, V2 + V3) = SP(V1, V2) .+ SP(V1, V3) .
    eq SP(K1 (x) V1, K2 (x) V2) = SP(K1, K2) .* SP(V1, V2) .
    eq (SP(V1, V2))^* = SP(V2, V1) .

    --- zero matrix properties
    eq 0 . M = O .
    eq S . O = O .
    eq 1 . M = M .

    eq O + M = M .
    eq M + O = M .

    eq O x M = O .
    eq M x O = O .

    eq M (x) O = O .
    eq O (x) M = O .

    --- nil matrix
    eq nil (x) M = M .
    eq M (x) nil = M .
    eq M + nil = M .
    eq S . nil = nil .

    --- identity matrix properties
    eq I x M = M .
    eq M x I = M .
    eq <0| x |0> = I .
    eq <1| x |1> = I .
    eq <0| x |1> = O .
    eq <1| x |0> = O .

    --- dagger properties
    eq (I)^+ = I .
    eq (O)^+ = O .
    eq (|0>)^+ = <0| .
    eq (|1>)^+ = <1| .
    eq (<0|)^+ = |0> .
    eq (<1|)^+ = |1> .
    eq (S . M)^+ = ((S)^*) . (M)^+ .
    eq (M1 x M2)^+ = (M2)^+ x (M1)^+ .
    eq (M1 + M2)^+ = (M1)^+ + (M2)^+ .
    eq (M1 (x) M2)^+ = (M1)^+ (x) (M2)^+ .
    eq ((M)^+)^+ = M .

    --- ditributive properties
    eq M1 x (M2 + M3) = M1 x M2 + M1 x M3 .
    eq (M1 + M2) x M3 = M1 x M3 + M2 x M3 .

    --- additive normal forms
    eq S . (M1 + M2) = S . M1 + S . M2 .
    eq (S1 . M) + (S2 . M) = (S1 .+ S2) . M .
    eq (S1 . M) + M = (S1 .+ 1) . M .
    eq M + M = 2 . M .
    --- multiplicative normal forms
    eq (S1 . M1) x (S2 . M2) = (S1 .* S2) . (M1 x M2) .
    eq (S . M1) x M2 = S . (M1 x M2) .
    eq M1 x (S . M2) = S . (M1 x M2) .
    --- scalar normal forms
    eq S1 . (S2 . M) = (S1 .* S2) . M .
    --- tensor product normal forms
    --- eq (S1 . M1) (x) (S2 . M2) = (S1 .* S2) . (M1 (x) M2) . --- may ignore
    eq (S . M1) (x) M2 = S . (M1 (x) M2) .
    eq M1 (x) (S . M2) = S . (M1 (x) M2) .

    --- tensor product properties
    eq (M1 (x) M2) x (M3 (x) M4) = (M1 x M3) (x) (M2 x M4) .
    eq M1 (x) (M2 + M3) = M1 (x) M2 + M1 (x) M3 .
    eq (M1 + M2) (x) M3 = M1 (x) M3 + M2 (x) M3 .

    --- basic matrices
    ops B0 B1 B2 B3 P0 P1 : -> Matrix .
    eq B0 = |0> x <0| .
    eq B1 = |0> x <1| .
    eq B2 = |1> x <0| .
    eq B3 = |1> x <1| .
    eq P0 = B0 .
    eq P1 = B3 .

    --- basic gates
    ops X Y Z H S T CX CY CZ SWAP CCX CCZ CSWAP : -> Matrix .
    eq X = B1 + B2 .
    eq Y = ((-1) .* i) . B1 + i . B2 .
    eq Z = B0  + (-1) . B3 .
    eq H = 1 ./ Sqrt(2) . B0 + 1 ./ Sqrt(2) . B1 + 1 ./ Sqrt(2) . B2 + (-1) ./ Sqrt(2) . B3 .
    eq S = B0 + i . B3 .
    eq T = B0 + ((1 + i) ./ Sqrt(2)) . B3 .
    eq CX = B0 (x) I + B3 (x) X .
    eq CY = B0 (x) I + B3 (x) Y .
    eq CZ = B0 (x) I + B3 (x) Z .
    --- SWAP(N1, N2) = CX(N1, N2) x CX(N2, N1) x CX(N1, N2)
    eq SWAP = (B0 (x) I + B3 (x) X) x (I (x) B0 + X (x) B3) x (B0 (x) I + B3 (x) X) .
    --- CCX = B0(x)I(x)I + B3(x)B0(x)I + B3(x)B3(x)B1 + B3(x)B3(x)B2
    eq CCX = B0 (x) I (x) I + B3 (x) CX . 
    --- CCZ = B0(x)I(x)I + B3(x)B0(x)I + B3(x)B3(x)B0 + (-1) . B3(x)B3(x)B3
    eq CCZ = B0 (x) I (x) I + B3 (x) CZ . 
    --- CSWAP = B0(x)I(x)I + B3(x)B0(x)B0 + B3(x)B1(x)B2 + B3(x)B2(x)B1 + B3(x)B3(x)B3
    eq CSWAP = B0 (x) I (x) I + B3 (x) SWAP .
endfm

fmod QUBIT is
    pr MATRIX .
    pr NAT-LIST .

    sorts OneQubit EnQubit Qubit QState .
    subsort OneQubit EnQubit < Qubit < QState .

    vars N N1 N2 : Nat .
    var V : Vector .
    var NL : NatList .

    --- empty qubit
    op emp : -> Qubit [ctor] .
    --- error qubit
    op errQ : -> Qubit [ctor] .
    op (q[_]:_) : NatList Vector -> Qubit .
    op __ : Qubit Qubit -> Qubit [ctor assoc comm id: emp] .
    mb(q[N]: V) : OneQubit .
    mb(q[N1 N2 NL]: V) : EnQubit .
    --- remove unnecessary qubits
    eq (q[nil]: V) = emp .
endfm

fmod SYMBOLIC-REASONING is
    pr QUBIT .

    vars N N1 N2 N3 N4 : Nat .
    vars M M1 M2 M3 M4 P : Matrix .
    vars NL NL1 NL2 NL3 NL4 : NatList .
    var QS : Qubit .
    vars S S1 S2 Prob : Scalar .
    vars Ket Ket1 Ket2 : Ket .
    vars V V1 V2 V3 : Vector .

    --- applying hadmard gate
    op _.H(_) : Qubit Nat -> Qubit .
    ceq ((q[NL1 N NL2]: V) QS).H(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) H (x) I[size(NL2)] .

    --- applying I gate
    op _.I(_) : Qubit Nat -> Qubit .
    eq (QS).I(N) = QS .

    --- applying X gate
    op _.X(_) : Qubit Nat -> Qubit .
    ceq ((q[NL1 N NL2]: V) QS).X(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) X (x) I[size(NL2)] .

    --- applying Y gate
    op _.Y(_) : Qubit Nat -> Qubit .
    ceq ((q[NL1 N NL2]: V) QS).Y(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) Y (x) I[size(NL2)] .

    --- applying Z gate
    op _.Z(_) : Qubit Nat -> Qubit .
    ceq ((q[NL1 N NL2]: V) QS).Z(N) = (q[NL1 N NL2]: M x V) QS
    if M := I[size(NL1)] (x) Z (x) I[size(NL2)] .

    --- applying CX gate
    op _.CX(_,_) : Qubit Nat Nat -> Qubit .
    ceq ((q[NL1 N1 NL2]: V1) (q[NL3 N2 NL4]: V2) QS).CX(N1, N2)
    = simplify((q[NL1 N1 NL2 NL3 N2 NL4]: M x V)) QS
    if V := V1 (x) V2
    /\ M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) I (x) I[size(NL4)]
    /\ M2 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) X (x) I[size(NL4)]
    /\ M := M1 + M2 .

    ceq ((q[NL1 N1 NL2 N2 NL3]: V) QS).CX(N1, N2) = simplify((q[NL1 N1 NL2 N2 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) I (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) X (x) I[size(NL3)]
    /\ M := M1 + M2 .

    ceq ((q[NL1 N2 NL2 N1 NL3]: V) QS).CX(N1, N2) = simplify((q[NL1 N2 NL2 N1 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) I (x) I[size(NL2)] (x) B0 (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) X (x) I[size(NL2)] (x) B3 (x) I[size(NL3)]
    /\ M := M1 + M2 .

    --- applying SWAP gate
    op _.SWAP(_,_) : Qubit Nat Nat -> Qubit .
    ceq ((q[NL1 N1 NL2]: V1) (q[NL3 N2 NL4]: V2) QS).SWAP(N1, N2)
    = simplify((q[NL1 N1 NL2 NL3 N2 NL4]: M x V)) QS
    if V := V1 (x) V2
    /\ M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) B0 (x) I[size(NL4)]
    /\ M2 := I[size(NL1)] (x) B1 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) B2 (x) I[size(NL4)]
    /\ M3 := I[size(NL1)] (x) B2 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) B1 (x) I[size(NL4)]
    /\ M4 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x)
            I[size(NL3)] (x) B3 (x) I[size(NL4)]
    /\ M := 1 / 2 . (M1 + M2 + M3 + M4) .

    ceq ((q[NL1 N1 NL2 N2 NL3]: V) QS).SWAP(N1, N2)
    = simplify((q[NL1 N1 NL2 N2 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) B0 (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) B1 (x) I[size(NL2)] (x) B2 (x) I[size(NL3)]
    /\ M3 := I[size(NL1)] (x) B2 (x) I[size(NL2)] (x) B1 (x) I[size(NL3)]
    /\ M4 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) B3 (x) I[size(NL3)]
    /\ M := 1 / 2 . (M1 + M2 + M3 + M4) .

    ceq ((q[NL1 N2 NL2 N1 NL3]: V) QS).SWAP(N1, N2)
    = simplify((q[NL1 N2 NL2 N1 NL3]: M x V)) QS
    if M1 := I[size(NL1)] (x) B0 (x) I[size(NL2)] (x) B0 (x) I[size(NL3)]
    /\ M2 := I[size(NL1)] (x) B1 (x) I[size(NL2)] (x) B2 (x) I[size(NL3)]
    /\ M3 := I[size(NL1)] (x) B2 (x) I[size(NL2)] (x) B1 (x) I[size(NL3)]
    /\ M4 := I[size(NL1)] (x) B3 (x) I[size(NL2)] (x) B3 (x) I[size(NL3)]
    /\ M := 1 / 2 . (M1 + M2 + M3 + M4) .

    --- projections
    op _.P`(_,_`) : Qubit Nat Matrix -> Qubit .
    ceq ((q[NL1 N NL2]: V1) QS).P(N, P) = simplify((q[NL1 N NL2]: V2) QS)
    if V2 := (I[size(NL1)] (x) (P x (P)^+) (x) I[size(NL2)]) x V1 .

    op _.P`(_,_,_`) : Qubit Nat Nat Matrix -> Qubit .
    ceq ((q[NL1 N1 N2 NL2]: V1) QS).P(N1, N2, P) = simplify((q[NL1 N1 N2 NL2]: V2) QS)
    if V2 := (I[size(NL1)] (x) (P x (P)^+) (x) I[size(NL2)]) x V1 .

    op _.P`(_,_,_`) : Qubit Nat Nat Matrix -> Qubit .
    eq ((q[NL1 N1 N2 NL2]: V1) QS).P(N2, N1, P) = ((q[NL1 N1 N2 NL2]: V1) QS).P(N1, N2, P) .

    --- N -> I (x) I (x) ...
    op I[_] : Nat -> Matrix .
    eq I[0] = nil .
    ceq I[N] = I (x) I[sd(N, 1)] if N > 0 .

    --- simplify a multiple qubit
    op simplify : Qubit -> Qubit .
    eq simplify(QS) = simplifyEPR(simplifyOne(QS)) .

    op simplifyOne : Qubit -> Qubit .
    eq simplifyOne((q[NL]: M) QS) = simplifyOne(QS)
    if size(NL) > 1 then simplifyOne*(NL, (q[NL]: M)) else (q[NL]: M) fi .
    eq simplifyOne(emp) = emp .

    op simplifyOne* : NatList Qubit -> Qubit .
    ceq simplifyOne*(N NL1, (q[NL2]: M)) = if sameKet?*(NL2, N, M, Ket) then
        (q[N] : Ket)
        simplifyOne*(NL1, q[rmIndex(NL2, N)]: rmQubitAt(NL2, N, M))
    else
        simplifyOne*(NL1, (q[NL2]: M))
    fi
    if Ket := firstKetAt*(NL2, N, M) .

    eq simplifyOne*(nil, QS) = QS .

    --- simplify the multiplication of two ERP states
    --- [TODO] only support some specific cases
    op simplifyEPR : Qubit -> Qubit .
    eq simplifyEPR((q[NL]: M) QS) = simplifyEPR*((q[NL]: M)) simplifyEPR(QS) .
    eq simplifyEPR(emp) = emp .

    op simplifyEPR* : Qubit -> Qubit .
    --- case 1
    eq simplifyEPR*((q[N1 N2 N3 N4]: S . |0>(x)|0>(x)|0>(x)|0> + S . |0>(x)|1>(x)|1>(x)|0> +
                                     S . |1>(x)|0>(x)|0>(x)|1> + S . |1>(x)|1>(x)|1>(x)|1>))
    = (q[N1 N4]: Sqrt(S) . (|0>(x)|0> + |1>(x) |1>)) (q[N2 N3]: Sqrt(S) . (|0>(x)|0> + |1>(x) |1>)) .
    --- case 2
    ceq simplifyEPR*((q[N1 N2 N3 N4]: S1 . |0>(x)|0>(x)|0>(x)|0> + S1 . |0>(x)|1>(x)|1>(x)|0> +
                                     S2 . |1>(x)|0>(x)|0>(x)|1> + S2 . |1>(x)|1>(x)|1>(x)|1>))
    = (q[N1 N4]: Sqrt(S1) . (|0>(x)|0> + (-1) . |1>(x) |1>)) (q[N2 N3]: Sqrt(S2) . (|0>(x)|0> + |1>(x) |1>))
    if S1 == (-1) .* S2 .
    --- otherwise
    eq simplifyEPR*(QS) = QS [owise] .

    --- remove an index from a natural list
    op rmIndex : NatList Nat -> NatList .
    eq rmIndex(N1 NL, N2) = if N1 == N2 then NL else N1 rmIndex(NL, N2) fi .
    eq rmIndex(nil, N) = nil .

    --- get a first ket at a single qubit with an index
    op firstKetAt : Qubit Nat -> Ket .
    eq firstKetAt((q[NL1 N NL2]: M), N) = firstKetAt*(NL1 N NL2, N, M) .

    op firstKetAt* : NatList Nat Matrix -> Ket .
    eq firstKetAt*(NL, N, S . M) = firstKetAt**(NL, N, M) .
    eq firstKetAt*(NL, N, S . M1 + M2) = firstKetAt**(NL, N, M1) .
    eq firstKetAt*(NL, N, M) = firstKetAt**(NL, N, M) [owise] .

    op firstKetAt** : NatList Nat Matrix -> Ket .
    eq firstKetAt**(N1 NL, N2, Ket (x) M) = if N1 == N2 then Ket else firstKetAt**(NL, N2, M) fi .
    eq firstKetAt**(N, N, Ket) = Ket .

    --- checking if a single qubit is solely |0> or |1> in a multiple qubits
    op sameKet? : Qubit Nat Ket -> Bool .
    eq sameKet?((q[NL1 N NL2]: M), N, Ket) = sameKet?*(NL1 N NL2, N, M, Ket) .

    op sameKet?* : NatList Nat Matrix Ket -> Bool .
    eq sameKet?*(NL, N, S . M, Ket) = sameKet?*(NL, N, M, Ket) .
    eq sameKet?*(NL, N, S . M1 + M2, Ket) = sameKet?*(NL, N, S . M1, Ket) and sameKet?*(NL, N, M2, Ket) .
    eq sameKet?*(NL, N, M, Ket) = sameKet?**(NL, N, M, Ket) [owise] .

    op sameKet?** : NatList Nat Matrix Ket -> Bool .
    eq sameKet?**(N1 NL, N2, Ket1 (x) M, Ket2) = if N1 == N2 then Ket1 == Ket2 else sameKet?**(NL, N2, M, Ket2) fi .
    eq sameKet?**(N, N, Ket1, Ket2) = Ket1 == Ket2 .

    --- qubit information
    op qubitAt : Qubit NatList -> Matrix .
    ceq qubitAt((q[NL]: M) QS, NL) = M if NL =/= nil .
    eq qubitAt(QS, NL) = errM [owise] .

    --- remove qubit at a index after a measurement
    op rmQubitAt : NatList Nat Matrix -> Matrix .
    eq rmQubitAt(NL, N, S . M) = S . rmQubitAt(NL, N, M) .
    eq rmQubitAt(NL, N, S . M1 + M2) = rmQubitAt(NL, N, S . M1) + rmQubitAt(NL, N, M2) .
    eq rmQubitAt(NL, N, M) = rmQubitAt*(NL, N, M) [owise] .

    op rmQubitAt* : NatList Nat Matrix -> Matrix .
    eq rmQubitAt*(N1 NL, N2, Ket (x) M) = if N1 == N2 then M else Ket (x) rmQubitAt*(NL, N2, M) fi .
    eq rmQubitAt*(N, N, Ket) = nil .
endfm