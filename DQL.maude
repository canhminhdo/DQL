in symbolic-reasoning.maude .

fmod DQL is
    pr NAT .
    pr MATRIX .

    --- programs
    sorts AtomicProg Prog .
    subsort AtomicProg < Prog .

    --- atomic programs
    op I`(_`) : Nat -> AtomicProg .
    op X`(_`) : Nat -> AtomicProg .
    op Y`(_`) : Nat -> AtomicProg .
    op Z`(_`) : Nat -> AtomicProg .
    op H`(_`) : Nat -> AtomicProg .
    op CX`(_,_`) : Nat Nat -> AtomicProg .

    --- idenity denotes the end of programs
    ops abort skip : -> Prog [ctor] .
    op _;_ : Prog Prog -> Prog [ctor assoc id: skip prec 25] .
    op _U_ : Prog Prog -> Prog .
    op _* : Prog -> Prog .
    op _? : Formula -> Prog [prec 24] .

    --- formulas
    sorts AtomicFormula Formula .
    subsort AtomicFormula < Formula .

    --- quantum dynamic logic furmulas
    op _/\_ : Formula Formula -> Formula [assoc comm] .
    op neg_ : Formula -> Formula .
    op `[_`]_ : Prog Formula -> Formula .
    --- [IMPORTANT] only projective measurements are used for test
    op P`(_,_`) : Nat Ket -> Formula .

    --- if_then_else_fi commands
    op if_then_else_ fi : Formula Prog Prog -> Prog .
    eq if F:Formula then P1:Prog else P2:Prog fi =
    (F:Formula ? ; P1:Prog) U ((neg F:Formula) ? ; P2:Prog) .
endfm

mod DQL-SEMANTICS is
    pr DQL .
    pr SYMBOLIC-REASONING .

    sorts Judgement JudgementSet .
    subsort Judgement < JudgementSet .

    op _|=_ : QState Formula -> Judgement .
    op emptyJS : -> JudgementSet .
    op _/\_ : JudgementSet JudgementSet -> JudgementSet [ctor comm assoc id: emptyJS] .

    vars PROG PROG' : Prog .
    vars Q Q' : QState .
    vars N N1 N2 : Nat .
    var Prob : Scalar .
    var Ket : Ket .
    vars Phi Psi : Formula .

    --- atomic programs
    eq Q |= [I(N)] Phi = Q |= Phi .
    ceq Q |= [X(N)] Phi = Q' |= Phi if Q' := (Q).X(N) .
    ceq Q |= [Y(N)] Phi = Q' |= Phi if Q' := (Q).Y(N) .
    ceq Q |= [Z(N)] Phi = Q' |= Phi if Q' := (Q).Z(N) .
    ceq Q |= [H(N)] Phi = Q' |= Phi if Q' := (Q).H(N) .
    ceq Q |= [CX(N1, N2)] Phi = Q' |= Phi if Q' := (Q).CX(N1, N2) .
    --- measurement operator as test
    ceq Q |= [P(N, Ket)?] Phi = Q' |= Phi if {qstate: Q', prob: Prob} := (Q).P(Ket, N) [print "Prob = " Prob] .
    --- other programs
    eq Q |= [skip] Phi = Q |= Phi .
    --- program composition
    ceq Q |= [PROG' ; PROG] Phi = Q |= [PROG']([PROG] Phi) if PROG' =/= skip and-then PROG =/= skip .
    --- choice programs
    rl [choice] : Q |= [PROG' U PROG] Phi => (Q |= [PROG'] Phi) /\ (Q |= [PROG] Phi) .
    --- conjunction
    rl [and] : Q |= Phi /\ Psi => (Q |= Phi) /\ (Q |= Psi) .
    --- negation
    eq neg P(N, |0>) = P(N, |1>) .
    eq neg P(N, |1>) = P(N, |0>) .
endm

--- specifying closed subspaces for atomic formulas
view Qubit from TRIV to QUBIT is
    sort Elt to Matrix .
endv

fmod QUBIT-SET is
    pr SET{Qubit} * (
        sort NeSet{Qubit} to NeQubitSet,
        sort Set{Qubit} to QubitSet
    ) .
endfm

mod CLOSED-SUBSPACES is
    pr QUBIT-SET .
    pr DQL-SEMANTICS .

    sort ClosedSS .

    --- an interpretation for atomic formulas
    op V : AtomicFormula -> ClosedSS .
    op `{_`} : QubitSet -> ClosedSS [ctor] .
    op _in_ : Matrix ClosedSS -> JudgementSet .

    vars M M1 M2 : Matrix .

    --- tailored to check whether a qubit belong to one dimentional subspaces
    --- [todo] developing a function to check whether a vector $v$ belongs to a sub-statespace spaned by {v_1, ..., v_n}
    eq M in { M } = emptyJS .
    ceq M1 in { M2 } = emptyJS if (-1) . M1 == M2 .
    ceq M1 in { M2 } = emptyJS if (i) . M1 == M2 .
    ceq M1 in { M2 } = emptyJS if (i .* -1) . M1 == M2 .
endm