load ../CDQL.maude

fmod SECRET-SHARING is
    pr CDQL-SEMANTICS .

    var S : Scalar .

    --- defining initial states
    ops a b : -> Scalar .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) = 1 .
    eq S .* Pow(Abs(a), 2) .+ S .* Pow(Abs(b), 2) = S .

    op initQState : -> Qubit .
    eq initQState = (q[0]: a . |0> + b . |1>) (q[1]: |0>) (q[2]: |0>) (q[3]: |0>) .

    ops c03 c13 c23 : -> Channel .
    ops Alice Bob Charlie : -> Prog .
    eq Alice = CX(0, 1) ; H(0) ;
        if P(1, |0>) then (c13 <: 0) else (c13 <: 1) fi ;
        if P(0, |0>) then (c03 <: 0) else (c03 <: 1) fi .
    eq Charlie = H(2) ;
        if P(2, |0>) then (c23 <: 0) else (c23 <: 1) fi .
    eq Bob = ((c13 :> 1) ; X(3) U (c13 :> 0)) ;
        ((c03 :> 1) ; Z(3) U (c03 :> 0)) ;
        ((c23 :> 1) ; Z(3) U (c23 :> 0)) .
endfm

in ../../debug.maude

--- for sequential version
--- red in SECRET-SHARING : initQState |= 
--- [
---     H(1) ; CX(1, 2) ; CX(1, 3) ; CX(0, 1) ; H(0) ; H(2) ;
---     if P(1, |0>) then skip else X(3) fi ;
---     if P(0, |0>) then skip else Z(3) fi ;
---     if P(2, |0>) then skip else Z(3) fi
--- ] P(3, qubitAt(initQState, 0)) .

--- for concurrent version
red in SECRET-SHARING : initQState |=
[
    H(1) ; CX(1, 2) ; CX(2, 3) ;
    encap(Alice || Bob || Charlie)[
        c03 <: 0, c03 <: 1, c13 <: 0, c13 <: 1, c23 <: 0, c23 <: 1,
        c03 :> 0, c03 :> 1, c13 :> 0, c13 :> 1, c23 :> 0, c23 :> 1
    ]
]
P(3, qubitAt(initQState, 0)) .
