load ../CDQL.maude

fmod TWO-QUBIT-TELEPORT is
    pr CDQL-SEMANTICS .

    var S : Scalar .

    --- defining initial states
    ops a b c d : -> Scalar .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) .+ Pow(Abs(c), 2) .+ Pow(Abs(d), 2) = 1 .
    eq S .* Pow(Abs(a), 2) .+ S .* Pow(Abs(b), 2) .+ S .* Pow(Abs(c), 2) .+ S .* Pow(Abs(d), 2) = S .

    op initQState : -> Qubit .
    eq initQState = (q[0 1]: a . |0> (x) |0> + b . |0> (x) |1> + c . |1> (x) |0> + d . |1> (x) |1>)
                    (q[2]: |0>) (q[3]: |0>) (q[4]: |0>) (q[5]: |0>) .

    ops c04 c15 c24 c35 : -> Channel .
    ops Alice Bob : -> Prog .
    eq Alice = CX(0, 2) ; CX(1, 3) ; H(0) ; H(1) ;
        if P(3, |0>) then (c35 <: 0) else (c35 <: 1) fi ;
        if P(2, |0>) then (c24 <: 0) else (c24 <: 1) fi ;
        if P(1, |0>) then (c15 <: 0) else (c15 <: 1) fi ;
        if P(0, |0>) then (c04 <: 0) else (c04 <: 1) fi .
    eq Bob = ((c35 :> 1) ; X(5) U (c35 :> 0)) ;
        ((c24 :> 1) ; X(4) U (c24 :> 0)) ;
        ((c15 :> 1) ; Z(5) U (c15 :> 0)) ;
        ((c04 :> 1) ; Z(4) U (c04 :> 0)) .                    
endfm

in ../../debug.maude

--- for sequential version
--- red in TWO-QUBIT-TELEPORT : initQState |= 
--- [ 
---     H(2) ; H(3) ; CX(2, 4) ; CX(3, 5); CX(0, 2) ; CX(1, 3) ; H(0) ; H(1) ;
---     if P(3, |0>) then skip else X(5) fi ;
---     if P(2, |0>) then skip else X(4) fi ;
---     if P(1, |0>) then skip else Z(5) fi ;
---     if P(0, |0>) then skip else Z(4) fi
--- ] P(4, 5, qubitAt(initQState, 0 1)) .

--- for concurrent version
red in TWO-QUBIT-TELEPORT : initQState |=
[
    H(2) ; H(3) ; CX(2, 4) ; CX(3, 5); 
    encap(Alice || Bob)[
        c04 <: 0, c04 <: 1, c15 <: 0, c15 <: 1, c24 <: 0, c24 <: 1, c35 <: 0, c35 <: 1,
        c04 :> 0, c04 :> 1, c15 :> 0, c15 :> 1, c24 :> 0, c24 :> 1, c35 :> 0, c35 :> 1 
    ]
] P(4, 5, qubitAt(initQState, 0 1)) .