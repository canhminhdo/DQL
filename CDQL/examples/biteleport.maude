load ../CDQL.maude

fmod BIDIRECTIONAL-TELEPORT is
    pr CDQL-SEMANTICS .

    var S : Scalar .

    --- defining initial states
    ops a b c d : -> Scalar .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) = 1 .
    eq S .* Pow(Abs(a), 2) .+ S .* Pow(Abs(b), 2) = S .

    eq Pow(Abs(c), 2) .+ Pow(Abs(d), 2) = 1 .
    eq S .* Pow(Abs(c), 2) .+ S .* Pow(Abs(d), 2) = S .

    op initQState : -> Qubit .
    eq initQState = (q[0]: a . |0> + b . |1>) (q[1]: c . |0> + d . |1>)
                    (q[2]: |0>) (q[3]: |0>) (q[4]: |0>) (q[5]: |0>)  .

    ops c03 c14 c23 c54 : -> Channel .
    ops Alice Bob : -> Prog .
    eq Alice =  CX(0, 2) ; H(0) ;
                if P(2, |0>) then (c23 <: 0) else (c23 <: 1) fi ;
                if P(0, |0>) then (c03 <: 0) else (c03 <: 1) fi ;
                ((c54 :> 1) ; X(4) U (c54 :> 0)) ;
                ((c14 :> 1) ; Z(4) U (c14 :> 0)) .
    eq Bob = CX(1, 5) ; H(1) ;
             ((c23 :> 1) ; X(3) U (c23 :> 0)) ;
             ((c03 :> 1) ; Z(3) U (c03 :> 0)) ;
             if P(5, |0>) then (c54 <: 0) else (c54 <: 1) fi ;
             if P(1, |0>) then (c14 <: 0) else (c14 <: 1) fi .
endfm

in ../../debug.maude

--- for sequential version
--- red in BIDIRECTIONAL-TELEPORT : initQState |= 
--- [
---     H(2) ; CX(2, 3) ; H(4) ; CX(4, 5); CX(0, 2) ; CX(1, 5) ; H(0) ; H(1) ;
---     if P(2, |0>) then skip else X(3) fi ;
---     if P(0, |0>) then skip else Z(3) fi ;
---     if P(5, |0>) then skip else X(4) fi ;
---     if P(1, |0>) then skip else Z(4) fi
--- ] (P(3, qubitAt(initQState, 0)) /\ P(4, qubitAt(initQState, 1))) .

--- for concurrent version
red in BIDIRECTIONAL-TELEPORT : initQState |= 
[
    H(2) ; CX(2, 3) ; H(4) ; CX(4, 5);
    encap(Alice || Bob)[
        c03 <: 0, c03 <: 1, c14 <: 0, c14 <: 1, c23 <: 0, c23 <: 1, c54 <: 0, c54 <: 1,
        c03 :> 0, c03 :> 1, c14 :> 0, c14 :> 1, c23 :> 0, c23 :> 1, c54 :> 0, c54 :> 1
    ]
] (P(3, qubitAt(initQState, 0)) /\ P(4, qubitAt(initQState, 1))) .