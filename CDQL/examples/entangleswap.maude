load ../CDQL.maude

fmod ENTAGLE-SWAP is
    pr CDQL-SEMANTICS .

    var S : Scalar .

    --- defining initial states
    ops a b : -> Scalar .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) = 1 .
    eq S .* Pow(Abs(a), 2) .+ S .* Pow(Abs(b), 2) = S .

    ops EPR : -> Matrix .
    eq EPR = (1 ./ Sqrt(2)) . |0>(x)|0> + (1 ./ Sqrt(2)) . |1>(x)|1> .

    op initQState : -> Qubit .
    eq initQState = (q[0]: |0>) (q[1]: |0>) (q[2]: |0>) (q[3]: |0>) .

    ops c13 c23 : -> Channel .
    ops Alice Bob Charlie : -> Prog .
    eq Alice = skip .
    eq Charlie = CX(1, 2) ; H(1) ;
        if P(2, |0>) then (c23 <: 0) else (c23 <: 1) fi ;
        if P(1, |0>) then (c13 <: 0) else (c13 <: 1) fi .
    eq Bob = ((c23 :> 1) ; X(3) U (c23 :> 0)) ;
        ((c13 :> 1) ; Z(3) U (c13 :> 0)) .
endfm

in ../../debug.maude

--- for sequential version
--- red in ENTAGLE-SWAP : initQState |= 
--- [ 
---     H(1) ; CX(1, 0) ; H(3) ; CX(3, 2) ; CX(0, 3) ; H(0) ;
---     if P(3, |0>) then skip else X(2) fi ;
---     if P(0, |0>) then skip else Z(2) fi
--- ] P(1, 2, EPR) .

--- for concurent version
red in ENTAGLE-SWAP : initQState |=
[
    H(0) ; CX(0, 1) ; H(2) ; CX(2, 3) ;
    encap(Alice || Bob || Charlie)[
        c13 <: 0, c13 <: 1, c23 <: 0, c23 <: 1,
        c13 :> 0, c13 :> 1, c23 :> 0, c23 :> 1
    ]
] P(0, 3, EPR) .

