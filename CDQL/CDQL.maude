in ../BDQL.maude .

fmod CDQL-SYNTAX is
    pr BDQL-SYNTAX .

    sort Channel .

    --- merge operator (parallel composition), left-merge operator, communcation operator
    op _||_ : Prog Prog -> Prog [comm assoc] .
    op _||'_ : Prog Prog -> Prog .
    op _|_ : Prog Prog -> Prog [comm assoc] .

    --- sending
    ops _<:_ send : Channel Nat -> AtomicProg [ctor] .
    --- receiving
    ops _:>_ recv : Channel Nat -> AtomicProg [ctor] .

    --- communication function
    op _~_ : AtomicProg AtomicProg -> Prog [comm prec 24] .
endfm

view AtomicProg from TRIV to CDQL-SYNTAX is
    sort Elt to AtomicProg .
endv

fmod CDQL-SYNTAX-EXT is
    pr CDQL-SYNTAX .
    pr SET{AtomicProg} * (
        sort NeSet{AtomicProg} to NeAtomicProgSet,
        sort Set{AtomicProg} to AtomicProgSet
    ) .
    --- encapsulation operator
    op encap(_)[_] : Prog AtomicProgSet -> Prog .
endfm

fmod CDQL-SEMANTICS is
    pr CDQL-SYNTAX-EXT .
    pr BDQL-SEMANTICS .

    var N : Nat .
    var C : Channel .
    var A : Formula .
    var APS : AtomicProgSet .
    vars AP AP' : AtomicProg .
    vars PROG PROG' PROG1 PROG2 PROG3 PROG4 : Prog .

    --- encapsulation operator
    ceq encap(AP)[APS] = AP if not (AP in APS) .
    ceq encap(AP)[APS] = abort if AP in APS .
    eq encap(skip)[APS] = skip .
    eq encap(abort)[APS] = abort .
    eq encap((A ?))[APS] = (A ?) .
    eq encap(PROG ; PROG')[APS] = encap(PROG)[APS] ; encap(PROG')[APS] .
    eq encap(PROG U PROG')[APS] = encap(PROG)[APS] U encap(PROG')[APS] .

    --- axioms for merge operator
    eq PROG || PROG' = (PROG ||' PROG') U (PROG' ||' PROG) U (PROG | PROG') .

    --- axioms for left operator
    eq AP ||' PROG = AP ; PROG .
    eq skip ||' PROG = PROG .
    eq abort ||' PROG = abort .
    eq (A ?) ||' PROG = (A ?) ; PROG .

    eq (AP ; PROG) ||' PROG' = AP ; (PROG || PROG') .
    eq (skip ; PROG) ||' PROG' = PROG || PROG' .
    eq (abort ; PROG) ||' PROG' = abort .
    eq ((A ?) ; PROG) ||' PROG' = (A ?) ; (PROG || PROG') .

    eq ((PROG1 ; PROG2) ; PROG3) ||' PROG4 = (PROG1 ; (PROG2 ; PROG3)) ||' PROG4 .
    eq ((PROG1 U PROG2) ; PROG3) ||' PROG4 = ((PROG1 ; PROG3) U (PROG2 ; PROG3)) ||' PROG4 .
    eq (PROG1 U PROG2) ||' PROG3 = (PROG1 ||' PROG3) U (PROG2 ||' PROG3) .

    --- communication function
    eq send(C,N) ~ recv(C, N) = skip .
    eq (C <: N) ~ (C :> N) = skip .
    eq AP ~ AP' = abort [owise] .

    --- axioms for communication operator
    eq skip | PROG = abort .
    eq abort | PROG = abort .
    eq (A ?) | PROG = abort .
    eq AP | AP' = AP ~ AP' .
    eq AP | (AP' ; PROG) = (AP ~ AP') ; PROG .

    eq (skip ; PROG) | PROG' = abort .
    eq (abort ; PROG) | PROG' = abort .
    eq ((A ?) ; PROG) | PROG' = abort .
    eq (AP ; PROG) | (AP' ; PROG') = (AP ~ AP') ; (PROG || PROG') .

    eq ((PROG1 ; PROG2) ; PROG3) | PROG4 = (PROG1 ; (PROG2 ; PROG3)) | PROG4 .
    eq ((PROG1 U PROG2) ; PROG3) | PROG4 = ((PROG1 ; PROG3) U (PROG2 ; PROG3)) | PROG4 .
    eq (PROG1 U PROG2) | PROG3 = (PROG1 | PROG3) U (PROG2 | PROG3) .
endfm

--- in ../debug.maude

--- fmod BDQL-FULL-TEST is
---     pr BDQL-FULL .
---     ops a1 a2 a3 b1 b2 b3 d1 d2 d3 : -> AtomicProg .
---     ops c c1 c2 : -> Channel .
--- endfm

--- red encap((send(c1, 0) U send(c2, 1)) || (recv(c1, 0) U recv(c2, 1)))[send(c1, 0), send(c2, 1), recv(c1, 0), recv(c2, 1)] .
--- red send(c1, 0) || recv(c1, 0) .
--- red encap(send(c1, 0) || recv(c1, 0))[send(c1, 0)] .
--- red encap(send(c1, 0) || recv(c1, 0))[send(c1, 0), send(c2, 1), recv(c1, 0), recv(c2, 1)] .
--- red (a1 || a2) || a3 == a1 || (a2 || a3) .
--- red (a1 || a2) || a3 .
--- red a1 || (a2 || a3) .
--- red (a1 ; (c <: 0) ; a2) || (b1 ; (c :> 0) ; b2) .
--- red (a1 ; (c1 <: 0) ; a2 ; (c2 <: 0) ; a3) || (b1 ; (c2 :> 0) ; b2 ; (c1 :> 0) ; b3) .