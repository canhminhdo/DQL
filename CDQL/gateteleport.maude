load CDQL.maude

fmod GATE-TELEPORT is
    pr CDQL-SEMANTICS .

    var S : Scalar .

    --- defining initial states
    ops a b c d : -> Scalar .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) = 1 .
    eq S .* Pow(Abs(a), 2) .+ S .* Pow(Abs(b), 2) = S .

    eq Pow(Abs(c), 2) .+ Pow(Abs(d), 2) = 1 .
    eq S .* Pow(Abs(c), 2) .+ S .* Pow(Abs(d), 2) = S .

    op initQState : -> Qubit .
    eq initQState = (q[0]: a . |0> + b . |1>) (q[1]: |0>) (q[2]: |0>) (q[3]: |0>) (q[4]: |0>) (q[5]: c . |0> + d . |1>) .

    op targetQState : -> Qubit .
    eq targetQState = ((q[0]: c . |0> + d . |1>) (q[1]: a . |0> + b . |1>)).CX(0, 1) .

    ops c023 c12 c523 c43 : -> Channel .
    ops Alice Bob Charlie : -> Prog .
    eq Alice = CX(0, 1) ; H(0) ;
        if P(0, |0>) then (c023 <: 0) else (c023 <: 1) fi ;
        if P(1, |0>) then (c12 <: 0) else (c12 <: 1) fi .
    eq Bob = ((c023 :> 1) ; Z(2) ; Z(3) U (c023 :> 0)) ;
        ((c523 :> 1) ; X(2) ; X(3) U (c523 :> 0)) ;
        ((c12 :> 1) ; X(2) U (c12 :> 0)) ;
        ((c43 :> 1) ; Z(3) U (c43 :> 0)) .
    eq Charlie = CX(4, 5) ; H(4) ;
        if P(4, |0>) then (c43 <: 0) else (c43 <: 1) fi ;
        if P(5, |0>) then (c523 <: 0) else (c523 <: 1) fi .
endfm

in ../debug.maude

--- Following the circuit from wikipedia
--- red in GATE-TELEPORT : initQState |= 
--- [
---     H(1) ; CX(1, 2) ; H(3) ; CX(3, 4); CX(3, 2) ; CX(0, 1) ; H(0) ; CX(4, 5) ; H(4) ;
---     if P(0, |0>) then skip else Z(2) ; Z(3) fi ;
---     if P(1, |0>) then skip else X(2) fi ;
---     if P(5, |0>) then skip else X(2) ; X(3) fi ;
---     if P(4, |0>) then skip else Z(3) fi
--- ] P(3, 2, qubitAt(targetQState, 0 1)) .

red in GATE-TELEPORT : initQState |=
[ 
    H(1) ; CX(1, 2) ; H(3) ; CX(3, 4); CX(3, 2) ;
    encap(Alice || Bob || Charlie)[
        c023 <: 0, c023 <: 1, c12 <: 0, c12 <: 1, c43 <: 0, c43 <: 1, c523 <: 0, c523 <: 1,
        c023 :> 0, c023 :> 1, c12 :> 0, c12 :> 1, c43 :> 0, c43 :> 1, c523 :> 0, c523 :> 1
    ]
] P(3, 2, qubitAt(targetQState, 0 1)) .
