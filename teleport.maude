load DQL.maude

mod TELEPORT is
    pr DQL-SEMANTICS .

    var S : Scalar .

    --- defining initial states
    ops a b : -> Scalar .
    eq Pow(Abs(a), 2) .+ Pow(Abs(b), 2) = 1 .
    eq S .* Pow(Abs(a), 2) .+ S .* Pow(Abs(b), 2) = S .

    op initQState : -> Qubit .
    eq initQState = (q[0]: a . |0> + b . |1>) (q[1]: |0>) (q[2]: |0>) .
endm

mod TELEPORT-CHECK is
    pr TELEPORT .
    pr CLOSED-SUBSPACES .

    --- defining the subspaces for atomic formulas
    op prop : -> AtomicFormula [ctor] .
    eq V(prop) = { qubitAt(initQState, 0) } .

    var Q : Qubit .

    --- checking atomic formulas for Teleportation
    eq Q |= prop = qubitAt(Q, 2) in V(prop) [print "Q = " Q] .
endm

in debug.maude

search in TELEPORT-CHECK : initQState |= [ H(1) ; CX(1, 2) ; CX(0, 1) ; H(0) ;
(
    (P(0, |0>)? ; ((P(1, |0>)? ; skip) U (P(1, |1>)? ; X(2))))
    U
    (P(0, |1>)? ; ((P(1, |0>)? ; Z(2)) U (P(1, |1>)? ; Z(2) ; X(2))))
)
] prop =>! JS:JudgementSet such that JS:JudgementSet =/= emptyJS .

search in TELEPORT-CHECK : initQState |= [ H(1) ; CX(1, 2) ; CX(0, 1) ; H(0) ;
if
    (P(0, |0>) -> (if (P(1, |0>) -> skip) | (P(1, |1>) -> X(2)) fi))
    |
    (P(0, |1>) -> (if (P(1, |0>) -> Z(2)) | (P(1, |1>) -> Z(2) ; X(2)) fi))
fi
] prop =>! JS:JudgementSet such that JS:JudgementSet =/= emptyJS .
